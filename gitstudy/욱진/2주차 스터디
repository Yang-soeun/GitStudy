Chapter3. 차원 넘나들기(브랜치 설정)

branch의 정의 : '가지'라는 뜻으로 나무의 가지가 갈라지듯이 여러 시점마다 나뉠 수 있음
   
브랜치 생성 : git branch (새로운 브렌치 이름)

브랜치 목록 보기 : git branch

브랜치 이동 : git switch

브랜치 생성 후 바로 이동 : switch -c (새로운 브랜치 이름)

브랜치 이름 변경 : git branch -m (기존 브랜치 이름) (새 브랜치 이름)

브랜치 삭제 : git branch -d (삭제할 브랜치 이름)

브랜치 병합 : git merge (브랜치 이름) , 그 후 :wq 입력하여 마무리

리베이스(rebase)와 머지(merge)의 차이 

리베이스 : 브랜치를 다른 브랜치에 옮겨 붙히는 것

머지 : 병합, 두 브랜치를 이어 붙힘

차이점 1. 작업 내역이 다르게 처리

리베이스 : 작업 내역이 깔끔하게 한 줄로 정리

머지 : 많은 브랜치가 사용되면 흔적이 남아 진행 내역을 파악하기가 어려움

차이점 2. 코드 충돌 여부

----팀의 경우 이미 팀원들 간의 공유된 커밋에 대해서는 리베이스 사용 X -> 코드 충돌 가능성

--------------------------------------------------
충돌(오류) 상황 해결 방법

머지 충돌 : vs Code에선 변경 사항 선택 옵션이 발생 

1. 현재 변경 사항 수락 : 현재 브랜치의 내용 유지

2. 수신 변경 사항 수락 : 상대 브랜치의 내용으로 변경

3. 두 변경 사항 모두 수락 : 상대 브랜치와 현재 브랜치의 내용 동시 입력

4. 변경 사항 비교 : 양쪽 브랜치의 수정 사항 비교

리베이스 충돌 : 브랜치 안에 있는 모든 커밋마다 충돌을 하나씩 해결


Chapter 4. 깃허브 사용하기

깃허브(Githib) : 가장 널리 쓰이는 코드 공유 및 협업 서비스

특징

--구성원이 각자의 작업을 공유 공간에 올릴 때 깃허브가 중간에서 정리 -> 다른 사람과의 충돌 걱정 없이 협업 가능

저장소 푸시(push) 설정 방법

1. git remote : 원격 저장소 추가 ex)) git remote add (저장소 이름)

2. git branch -M : 브랜치의 이름 변경 ex)) git branch -M (저장소 이름)

3. git push : 현재 브랜치가 다른 브랜치와 연동될지를 지정 ex)) git push -U (저장소 이름) (푸시할 브랜치 이름)

Push : 로컬 저장소에 작업한 내용을 원격 저장소로 전송

Pull : 원격 저장소에서 변경한 내용을 로컬 저장소로 가져오는 것

리베이스와 머지로 pull 사용 법

머지 : git pull --np-rebase 입력

 리베이스: git pull --rebasse 입력 -> git push 입력
 

